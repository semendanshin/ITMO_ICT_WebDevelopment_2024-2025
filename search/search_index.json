{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u0430\u043d\u044c\u0448\u0438\u043d \u0421\u0435\u043c\u0451\u043d \u0410\u043b\u0435\u043a\u0441\u0435\u0432\u0438\u0447","title":"Home"},{"location":"#_1","text":"","title":"\u0414\u0430\u043d\u044c\u0448\u0438\u043d \u0421\u0435\u043c\u0451\u043d \u0410\u043b\u0435\u043a\u0441\u0435\u0432\u0438\u0447"},{"location":"LR%201/1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1 UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: python3 1/server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: python3 1/client.py \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u0421\u0435\u0440\u0432\u0435\u0440 import logging import socket from dataclasses import dataclass, field logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class UPDServer: host: str = '0.0.0.0' port: int = 8080 sock: socket.socket = field(init=False) def start(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) self.sock.bind((self.host, self.port)) logger.info(\"Server started\") def serve(self): while True: data, addr = self.sock.recvfrom(1024) text_data = data.decode('utf-8') logger.info(f\"Received data: {text_data}\") response = b\"Hello, client!\" self.sock.sendto(response, addr) logger.info(f\"Sent response: {response}\") def main(): server = UPDServer() server.start() server.serve() if __name__ == '__main__': main() \u041a\u043b\u0438\u0435\u043d\u0442 import logging import socket from dataclasses import dataclass logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class UDPClient: host: str = '0.0.0.0' port: int = 8080 def send(self, data: bytes) -> bytes: sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.sendto(data, (self.host, self.port)) response, _ = sock.recvfrom(1024) return response def main(): client = UDPClient() logger.debug(\"Client started\") response = client.send(b'Hello, server!') logger.info(f\"Received response: {response}\") if __name__ == '__main__': main()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"LR%201/1/#1","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1"},{"location":"LR%201/1/#udp-","text":"","title":"UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"LR%201/1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"LR%201/1/#_2","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: python3 1/server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: python3 1/client.py","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"LR%201/1/#_3","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"LR%201/1/#_4","text":"import logging import socket from dataclasses import dataclass, field logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class UPDServer: host: str = '0.0.0.0' port: int = 8080 sock: socket.socket = field(init=False) def start(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) self.sock.bind((self.host, self.port)) logger.info(\"Server started\") def serve(self): while True: data, addr = self.sock.recvfrom(1024) text_data = data.decode('utf-8') logger.info(f\"Received data: {text_data}\") response = b\"Hello, client!\" self.sock.sendto(response, addr) logger.info(f\"Sent response: {response}\") def main(): server = UPDServer() server.start() server.serve() if __name__ == '__main__': main()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"LR%201/1/#_5","text":"import logging import socket from dataclasses import dataclass logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class UDPClient: host: str = '0.0.0.0' port: int = 8080 def send(self, data: bytes) -> bytes: sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.sendto(data, (self.host, self.port)) response, _ = sock.recvfrom(1024) return response def main(): client = UDPClient() logger.debug(\"Client started\") response = client.send(b'Hello, server!') logger.info(f\"Received response: {response}\") if __name__ == '__main__': main()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"LR%201/2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2 TCP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u0441 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u043f\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0435 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430, \u0432\u0432\u043e\u0434\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: python 2/server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: python 2/client.py \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u0421\u0435\u0440\u0432\u0435\u0440 import json import logging import math import socket from dataclasses import dataclass, field from typing import Callable logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class TCPServer: host: str = '0.0.0.0' port: int = 8080 sock: socket.socket = field(init=False) def start(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.bind((self.host, self.port)) self.sock.listen(1) logger.info(\"Server started\") def serve(self, handler: Callable[[bytes], bytes]): while True: conn, addr = self.sock.accept() with conn: logger.info(f\"Connected by {addr}\") data = conn.recv(1024) response = handler(data) conn.sendall(response) logger.info(f\"Sent response: {response}\") def area_of_parallelogram(a: float, b: float, angle: float) -> float: return a * b * math.sin(math.radians(angle)) def handler(data: bytes) -> bytes: logger.info(f\"Received data: {data}\") data_json = json.loads(data) result = area_of_parallelogram(data_json.get('a'), data_json.get('b'), data_json.get('angle')) response = json.dumps({'result': result}).encode('utf-8') return response def main(): server = TCPServer() server.start() server.serve(handler) if __name__ == '__main__': main() \u041a\u043b\u0438\u0435\u043d\u0442 import json import logging import socket from dataclasses import dataclass logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class TCPClient: host: str = '0.0.0.0' port: int = 8080 def send(self, data: bytes) -> bytes: with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock: sock.connect((self.host, self.port)) sock.sendall(data) response = sock.recv(1024) return response def area_of_parallelogram(a: float, b: float, angle: float) -> float: payload = json.dumps({'a': a, 'b': b, 'angle': angle}).encode('utf-8') client = TCPClient() response = client.send(payload) response_json = json.loads(response) return response_json.get('result') def main(): a = float(input(\"Enter a: \")) b = float(input(\"Enter b: \")) angle = float(input(\"Enter angle: \")) result = area_of_parallelogram(a, b, angle) print(f\"Result: {result}\") if __name__ == '__main__': main()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"LR%201/2/#2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2"},{"location":"LR%201/2/#tcp-","text":"","title":"TCP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u0441 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439"},{"location":"LR%201/2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u043f\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0435 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430, \u0432\u0432\u043e\u0434\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"LR%201/2/#_2","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: python 2/server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: python 2/client.py","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"LR%201/2/#_3","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"LR%201/2/#_4","text":"import json import logging import math import socket from dataclasses import dataclass, field from typing import Callable logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class TCPServer: host: str = '0.0.0.0' port: int = 8080 sock: socket.socket = field(init=False) def start(self): self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.bind((self.host, self.port)) self.sock.listen(1) logger.info(\"Server started\") def serve(self, handler: Callable[[bytes], bytes]): while True: conn, addr = self.sock.accept() with conn: logger.info(f\"Connected by {addr}\") data = conn.recv(1024) response = handler(data) conn.sendall(response) logger.info(f\"Sent response: {response}\") def area_of_parallelogram(a: float, b: float, angle: float) -> float: return a * b * math.sin(math.radians(angle)) def handler(data: bytes) -> bytes: logger.info(f\"Received data: {data}\") data_json = json.loads(data) result = area_of_parallelogram(data_json.get('a'), data_json.get('b'), data_json.get('angle')) response = json.dumps({'result': result}).encode('utf-8') return response def main(): server = TCPServer() server.start() server.serve(handler) if __name__ == '__main__': main()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"LR%201/2/#_5","text":"import json import logging import socket from dataclasses import dataclass logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class TCPClient: host: str = '0.0.0.0' port: int = 8080 def send(self, data: bytes) -> bytes: with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock: sock.connect((self.host, self.port)) sock.sendall(data) response = sock.recv(1024) return response def area_of_parallelogram(a: float, b: float, angle: float) -> float: payload = json.dumps({'a': a, 'b': b, 'angle': angle}).encode('utf-8') client = TCPClient() response = client.send(payload) response_json = json.loads(response) return response_json.get('result') def main(): a = float(input(\"Enter a: \")) b = float(input(\"Enter b: \")) angle = float(input(\"Enter angle: \")) result = area_of_parallelogram(a, b, angle) print(f\"Result: {result}\") if __name__ == '__main__': main()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"LR%201/3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3 HTTP \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python 3/server.py \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: bash http://127.0.0.1:8080/ \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \"\"\" \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \"\"\" import socket import logging from dataclasses import dataclass from typing import Callable logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class TCPServer: host: str = '0.0.0.0' port: int = 8080 def start(self, handler: Callable[[bytes], bytes]): with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock: sock.bind((self.host, self.port)) sock.listen(1) logger.info(f\"Server started on {self.host}:{self.port}\") while True: conn, addr = sock.accept() with conn: logger.info(f\"Connection from {addr}\") data = conn.recv(1024) response = handler(data) conn.sendall(response) def handler(_: bytes) -> bytes: response_template = \"HTTP/1.1 200 OK\\nContent-Type: text/html\\n\\n{}\\n\" with open(\"index.html\", \"r\") as file: response = file.read() return response_template.format(response).encode('utf-8') def main(): server = TCPServer(host=\"localhost\") server.start(handler) if __name__ == '__main__': main()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"LR%201/3/#3","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3"},{"location":"LR%201/3/#http-html","text":"","title":"HTTP \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b"},{"location":"LR%201/3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html .","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"LR%201/3/#_2","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python 3/server.py \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: bash http://127.0.0.1:8080/","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"LR%201/3/#_3","text":"\"\"\" \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \"\"\" import socket import logging from dataclasses import dataclass from typing import Callable logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class TCPServer: host: str = '0.0.0.0' port: int = 8080 def start(self, handler: Callable[[bytes], bytes]): with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock: sock.bind((self.host, self.port)) sock.listen(1) logger.info(f\"Server started on {self.host}:{self.port}\") while True: conn, addr = sock.accept() with conn: logger.info(f\"Connection from {addr}\") data = conn.recv(1024) response = handler(data) conn.sendall(response) def handler(_: bytes) -> bytes: response_template = \"HTTP/1.1 200 OK\\nContent-Type: text/html\\n\\n{}\\n\" with open(\"index.html\", \"r\") as file: response = file.read() return response_template.format(response).encode('utf-8') def main(): server = TCPServer(host=\"localhost\") server.start(handler) if __name__ == '__main__': main()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"LR%201/4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4 \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python 4/server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445: bash python 4/client.py \u041b\u0438\u0441\u0442\u0438\u043d\u0433 \u0421\u0435\u0440\u0432\u0435\u0440 import logging import socket import threading from collections.abc import Callable from dataclasses import dataclass, field logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class TCPServer: host: str = '127.0.0.1' port: int = 8080 running: bool = field(default=False, init=False) def start(self, handler: Callable[[socket.socket], None]): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((self.host, self.port)) sock.listen() logger.info(f\"Server started on {self.host}:{self.port}\") self.running = True while self.running: conn, addr = sock.accept() logger.info(f\"Connection from {addr}\") threading.Thread(target=handler, args=(conn,), daemon=True).start() def stop(self): self.running = False @dataclass class ChatServer: server: TCPServer users: dict[socket.socket, str] = field(default_factory=dict, init=False) def handler(self, conn: socket.socket): conn.sendall(b\"Enter your username: \") username = conn.recv(1024).decode('utf-8').strip() self.users[conn] = username logger.info(f\"User {username} connected\") try: while True: data = conn.recv(1024) if not data: break message = data.decode('utf-8').strip() logger.info(f\"Message from {username}: {message}\") for client in self.users: if client == conn: continue client.sendall(f\"{username}: {message}\".encode('utf-8')) finally: conn.close() del self.users[conn] logger.info(f\"User {username} disconnected\") def start(self): self.server.start(self.handler) def main(): server = TCPServer() chat_server = ChatServer(server) chat_server.start() if __name__ == '__main__': main() \u041a\u043b\u0438\u0435\u043d\u0442 import socket import threading def listen_for_messages(sock): while True: try: message = sock.recv(1024).decode('utf-8') if message: print(message) else: break except Exception as e: print(f\"Error receiving message: {e}\") break sock.close() def main(): host = '127.0.0.1' port = 8080 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((host, port)) threading.Thread(target=listen_for_messages, args=(sock,), daemon=True).start() while True: message = input(\"\") if message.lower() == 'exit': break sock.sendall(message.encode('utf-8')) sock.close() if __name__ == '__main__': main()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"LR%201/4/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4"},{"location":"LR%201/4/#_1","text":"","title":"\u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442"},{"location":"LR%201/4/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"LR%201/4/#_3","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python 4/server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445: bash python 4/client.py","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"LR%201/4/#_4","text":"","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"LR%201/4/#_5","text":"import logging import socket import threading from collections.abc import Callable from dataclasses import dataclass, field logger = logging.getLogger(__name__) logging.basicConfig( level=logging.DEBUG, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s' ) @dataclass class TCPServer: host: str = '127.0.0.1' port: int = 8080 running: bool = field(default=False, init=False) def start(self, handler: Callable[[socket.socket], None]): sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.bind((self.host, self.port)) sock.listen() logger.info(f\"Server started on {self.host}:{self.port}\") self.running = True while self.running: conn, addr = sock.accept() logger.info(f\"Connection from {addr}\") threading.Thread(target=handler, args=(conn,), daemon=True).start() def stop(self): self.running = False @dataclass class ChatServer: server: TCPServer users: dict[socket.socket, str] = field(default_factory=dict, init=False) def handler(self, conn: socket.socket): conn.sendall(b\"Enter your username: \") username = conn.recv(1024).decode('utf-8').strip() self.users[conn] = username logger.info(f\"User {username} connected\") try: while True: data = conn.recv(1024) if not data: break message = data.decode('utf-8').strip() logger.info(f\"Message from {username}: {message}\") for client in self.users: if client == conn: continue client.sendall(f\"{username}: {message}\".encode('utf-8')) finally: conn.close() del self.users[conn] logger.info(f\"User {username} disconnected\") def start(self): self.server.start(self.handler) def main(): server = TCPServer() chat_server = ChatServer(server) chat_server.start() if __name__ == '__main__': main()","title":"\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"LR%201/4/#_6","text":"import socket import threading def listen_for_messages(sock): while True: try: message = sock.recv(1024).decode('utf-8') if message: print(message) else: break except Exception as e: print(f\"Error receiving message: {e}\") break sock.close() def main(): host = '127.0.0.1' port = 8080 sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) sock.connect((host, port)) threading.Thread(target=listen_for_messages, args=(sock,), daemon=True).start() while True: message = input(\"\") if message.lower() == 'exit': break sock.sendall(message.encode('utf-8')) sock.close() if __name__ == '__main__': main()","title":"\u041a\u043b\u0438\u0435\u043d\u0442"},{"location":"LR%201/5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5 Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0445 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0447\u0435\u0440\u0435\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python 5/server.py \u0414\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 curl \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 HTTP-\u043a\u043b\u0438\u0435\u043d\u0442: bash curl --header \"Content-Type: application/json\" -d '{\"subject\": \"math\", \"score\": 80}' -X POST http://127.0.0.1:8080/ \u0414\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: bash http://127.0.0.1:8080/ \u041b\u0438\u0441\u0442\u0438\u043d\u0433 import json import logging import socket import sys logging.basicConfig( level=logging.DEBUG, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\", ) logger = logging.getLogger(__name__) class Server: def __init__(self, host: str, port: int): self.host = host self.port = port self.data = [] self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.bind((self.host, self.port)) self.sock.listen(1) def run(self): logger.info(f\"Server started on {self.host}:{self.port}\") while True: conn, addr = self.sock.accept() with conn: logger.info(f\"Connected by {addr}\") data = conn.recv(1024) if not data: break data = data.decode(\"utf-8\") logger.info(f\"Received data: {data}\") response = self.handle_request(data) conn.sendall(self.format_response(200, response).encode(\"utf-8\")) @staticmethod def format_response(code: int, data: str) -> str: return f\"HTTP/1.1 {code}\\n\\n{data}\" def handle_request(self, data: str) -> str: lines = data.split(\"\\n\") method, path, protocol = lines[0].split(\" \") body = data.split(\"\\r\\n\\r\\n\")[-1] if method == \"GET\": return self.get_data() if method == \"POST\": self.save_data(body) return \"Data saved\" return \"Unknown command\" def save_data(self, data: str): data = json.loads(data) self.data.append(data) logger.info(f\"Data saved: {data}\") def get_data(self) -> str: return json.dumps(self.data) if __name__ == \"__main__\": host = \"127.0.0.1\" port = 8080 server = Server(host, port) try: server.run() except KeyboardInterrupt: logger.info(\"Server stopped\") sys.exit(0)","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"LR%201/5/#5","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5"},{"location":"LR%201/5/#web-get-post","text":"","title":"Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"LR%201/5/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0445 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0447\u0435\u0440\u0435\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"LR%201/5/#_2","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python 5/server.py \u0414\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 curl \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 HTTP-\u043a\u043b\u0438\u0435\u043d\u0442: bash curl --header \"Content-Type: application/json\" -d '{\"subject\": \"math\", \"score\": 80}' -X POST http://127.0.0.1:8080/ \u0414\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: bash http://127.0.0.1:8080/","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"LR%201/5/#_3","text":"import json import logging import socket import sys logging.basicConfig( level=logging.DEBUG, format=\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\", ) logger = logging.getLogger(__name__) class Server: def __init__(self, host: str, port: int): self.host = host self.port = port self.data = [] self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) self.sock.bind((self.host, self.port)) self.sock.listen(1) def run(self): logger.info(f\"Server started on {self.host}:{self.port}\") while True: conn, addr = self.sock.accept() with conn: logger.info(f\"Connected by {addr}\") data = conn.recv(1024) if not data: break data = data.decode(\"utf-8\") logger.info(f\"Received data: {data}\") response = self.handle_request(data) conn.sendall(self.format_response(200, response).encode(\"utf-8\")) @staticmethod def format_response(code: int, data: str) -> str: return f\"HTTP/1.1 {code}\\n\\n{data}\" def handle_request(self, data: str) -> str: lines = data.split(\"\\n\") method, path, protocol = lines[0].split(\" \") body = data.split(\"\\r\\n\\r\\n\")[-1] if method == \"GET\": return self.get_data() if method == \"POST\": self.save_data(body) return \"Data saved\" return \"Unknown command\" def save_data(self, data: str): data = json.loads(data) self.data.append(data) logger.info(f\"Data saved: {data}\") def get_data(self) -> str: return json.dumps(self.data) if __name__ == \"__main__\": host = \"127.0.0.1\" port = 8080 server = Server(host, port) try: server.run() except KeyboardInterrupt: logger.info(\"Server stopped\") sys.exit(0)","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"}]}